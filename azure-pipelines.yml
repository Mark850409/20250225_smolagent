trigger:
  branches:
    include:
      - main
      - master
  paths:
    include:
      - '*'    # 監控所有檔案變更
    exclude:
      - '*.md' # 排除 markdown 檔案變更

resources:
  repositories:
    - repository: github_repo
      type: github
      name: Mark850409/20250225_smolagent
      endpoint: github_connection  # 服務連接名稱

variables: 
  - group: mbti-analyzer-variables  # 引入變數群組
  - name: azureServiceConnection  # Azure 服務連接名稱
    value: 'acrmbtianlyzer'    # 使用 ACR 的服務連接名稱
  - name: projectName  # 專案設定
    value: 'mbti-analyzer'
  - name: pythonVersion
    value: '3.9'
  
  # Azure 資源設定
  - name: resourceGroupName
    value: 'AIChatBot'  # 根據截圖中的資源群組
  - name: location
    value: 'eastasia'
  - name: acrName
    value: 'acrmbtianalyzer'  # ACR 名稱必須是全域唯一的
  - name: webAppName
    value: 'app-mbti-analyzer'
  
  # Docker 映像設定
  - name: imageRepository
    value: 'mbti-analyzer'
  - name: dockerfilePath
    value: '$(Build.SourcesDirectory)/Dockerfile'
  - name: tag
    value: '$(Build.BuildId)'
stages:
- stage: Infrastructure
  displayName: 'Create Azure Infrastructure'
  jobs:
  - job: CreateInfrastructure
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # 登入 Azure
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'rg-mbti-analyzer'  # 使用你建立的服務連接名稱
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # 建立資源群組
          az group create --name $(resourceGroupName) --location $(location)
          
          # 建立 Container Registry
          az acr create \
            --resource-group $(resourceGroupName) \
            --name $(acrName) \
            --sku Basic \
            --admin-enabled true
          
          # 取得 ACR 登入資訊
          ACR_USERNAME=$(az acr credential show -n $(acrName) --query "username" -o tsv)
          ACR_PASSWORD=$(az acr credential show -n $(acrName) --query "passwords[0].value" -o tsv)
          
          # 設定 pipeline 變數
          echo "##vso[task.setvariable variable=ACR_USERNAME;]$ACR_USERNAME"
          echo "##vso[task.setvariable variable=ACR_PASSWORD;]$ACR_PASSWORD"
          echo "##vso[task.setvariable variable=ACR_LOGIN_SERVER;]$(acrName).azurecr.io"
      displayName: 'Create Azure Container Registry'

- stage: Build
  displayName: 'Build and Push Docker Image'
  dependsOn: Infrastructure
  jobs:
  - job: BuildAndPush
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # 登入 ACR
    - task: Docker@2
      inputs:
        containerRegistry: '$(azureServiceConnection)'
        command: 'login'
      displayName: 'Login to ACR'

    # 建立並推送 Docker 映像
    - task: Docker@2
      inputs:
        containerRegistry: '$(azureServiceConnection)'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePath)'
        buildContext: '$(Build.SourcesDirectory)'
        tags: |
          $(Build.BuildId)
          latest
      displayName: 'Build and Push Docker Image'

- stage: Deploy
  displayName: 'Deploy to Azure Web App'
  dependsOn: Build
  jobs:
  - job: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # 建立 Web App
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'rg-mbti-analyzer'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # 建立 App Service Plan
          az appservice plan create \
            --name asp-$(webAppName) \
            --resource-group $(resourceGroupName) \
            --sku F1 \
            --is-linux
          
          # 建立 Web App
          az webapp create \
            --resource-group $(resourceGroupName) \
            --plan asp-$(webAppName) \
            --name $(webAppName) \
            --deployment-container-image-name $(ACR_LOGIN_SERVER)/$(imageRepository):latest
          
          # 設定環境變數
          az webapp config appsettings set \
            --resource-group $(resourceGroupName) \
            --name $(webAppName) \
            --settings \
            WEBSITES_PORT=5000 \
            EMBEDDING_MODEL_NAME=$(EMBEDDING_MODEL_NAME) \
            HUGGINGFACE_API_KEY=$(HUGGINGFACE_API_KEY) \
            HUGGINGFACE_MODEL=$(HUGGINGFACE_MODEL) \
            SERP_API_KEY=$(SERP_API_KEY)
          
          # 設定 ACR 認證
          az webapp config container set \
            --resource-group $(resourceGroupName) \
            --name $(webAppName) \
            --docker-registry-server-url https://$(ACR_LOGIN_SERVER) \
            --docker-registry-server-user $(ACR_USERNAME) \
            --docker-registry-server-password $(ACR_PASSWORD)
      displayName: 'Create and Configure Web App'